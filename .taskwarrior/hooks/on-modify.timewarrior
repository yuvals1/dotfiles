#!/usr/bin/env python3

import json
import os
import sys
from datetime import datetime

# Activate the virtual environment
venv_path = os.path.join(os.path.dirname(__file__), ".venv")
activate_script = os.path.join(venv_path, "bin", "activate_this.py")

if os.path.exists(activate_script):
    with open(activate_script) as f:
        exec(f.read(), {"__file__": activate_script})
else:
    # For newer versions of venv that might not have activate_this.py
    site_packages = os.path.join(
        venv_path,
        "lib",
        f"python{sys.version_info.major}.{sys.version_info.minor}",
        "site-packages",
    )
    sys.path.insert(0, site_packages)

# Ensure modules in the same directory can be imported
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, script_dir)

from db_utils import (connect_db, create_table, insert_entry,
                      update_entry_description, update_entry_end_time,
                      update_entry_tags)
from task_utils import (extract_description, extract_tags_from, extract_uuid,
                        has_description_changed, has_task_started,
                        has_task_stopped, have_tags_changed)
from timew_utils import (annotate_description, annotate_uuid,
                         start_time_tracking, stop_time_tracking,
                         update_timew_tags)


def main():
    # Read old and new task data
    try:
        input_stream = sys.stdin.buffer
    except AttributeError:
        input_stream = sys.stdin

    old = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
    new = json.loads(input_stream.readline().decode("utf-8", errors="replace"))

    # Output the new task data
    print(json.dumps(new))

    # Determine task state changes
    is_started = has_task_started(old, new)
    is_stopped = has_task_stopped(old, new)

    # Set up the database connection
    engine = connect_db()
    create_table(engine)

    if is_started or is_stopped:
        tags = extract_tags_from(new)
        uuid = extract_uuid(new)
        description = extract_description(new)
        tags_str = ",".join(tags)

        if is_started:
            start_time_tracking(tags)
            annotate_description(description)
            annotate_uuid(uuid)
            start_time = new.get("start", "")
            if not start_time:
                start_time = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
            insert_entry(engine, uuid, description, start_time, None, tags_str)
        elif is_stopped:
            stop_time_tracking()
            end_time = new.get("end", "")
            if not end_time:
                end_time = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
            update_entry_end_time(engine, uuid, end_time)
    elif "start" in new and "start" in old:
        # Handle modifications to a running task
        old_tags = extract_tags_from(old)
        new_tags = extract_tags_from(new)
        uuid = extract_uuid(new)
        tags_str = ",".join(new_tags)

        if have_tags_changed(old_tags, new_tags):
            update_timew_tags(old_tags, new_tags)
            update_entry_tags(engine, uuid, tags_str)

        old_description = extract_description(old)
        new_description = extract_description(new)
        if has_description_changed(old_description, new_description):
            annotate_description(new_description)
            update_entry_description(engine, uuid, new_description)


if __name__ == "__main__":
    main()
