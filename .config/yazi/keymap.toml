# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[mgr]

keymap = [
  { on = "<Esc>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
  { on = "<C-[>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
  { on = "q", run = "quit", desc = "Exit the process" },
  { on = "-", run = "quit", desc = "Quit Yazi" },

  # { on = "Q", run = "quit --no-cwd-file", desc = "Exit the process without writing cwd-file" },
  { on = "<C-c>", run = "close", desc = "Close the current tab, or quit if it is last tab" },
  { on = "<C-z>", run = "suspend", desc = "Suspend the process" },

  # Hopping
  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  { on = "<C-u>", run = "arrow -50%", desc = "Move cursor up half page" },
  { on = "<C-d>", run = "arrow 50%", desc = "Move cursor down half page" },
  { on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
  { on = "<C-f>", run = "arrow 100%", desc = "Move cursor down one page" },

  { on = "<S-PageUp>", run = "arrow -50%", desc = "Move cursor up half page" },
  { on = "<S-PageDown>", run = "arrow 50%", desc = "Move cursor down half page" },
  { on = "<PageUp>", run = "arrow -100%", desc = "Move cursor up one page" },
  { on = "<PageDown>", run = "arrow 100%", desc = "Move cursor down one page" },

  { on = [
    "g",
    "g",
  ], run = "arrow top", desc = "Move cursor to the top" },
  { on = "G", run = "arrow bot", desc = "Move cursor to the bottom" },
  # Navigation
  { on = "h", run = "leave", desc = "Go back to the parent directory" },
  { on = "l", run = "enter", desc = "Enter the child directory" },

  { on = "<Left>", run = "leave", desc = "Go back to the parent directory" },
  { on = "<Right>", run = "enter", desc = "Enter the child directory" },

  # { on = "H", run = "back", desc = "Go back to the previous directory" },
  # { on = "L", run = "forward", desc = "Go forward to the next directory" },

  # Toggle
  { on = "<Space>", run = [
    "toggle",
    "arrow 1",
  ], desc = "Toggle the current selection state" },
  { on = "<C-a>", run = "toggle_all --state=on", desc = "Select all files" },
  { on = "<C-r>", run = "toggle_all", desc = "Invert selection of all files" },

  # Visual mode
  { on = "v", run = "visual_mode", desc = "Enter visual mode (selection mode)" },
  { on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },

  # Seeking
  { on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
  { on = "J", run = "seek 5", desc = "Seek down 5 units in the preview" },

  # Spotting
  { on = "<Tab>", run = "spot", desc = "Spot hovered file" },

  # Operation
  { on = "o", run = "open", desc = "Open selected files" },
  { on = "O", run = "open --interactive", desc = "Open selected files interactively" },
  { on = "F", run = '''shell --confirm 'osascript -e "tell application \"Finder\"" -e "set fileList to {}" -e "$(for f in "$@"; do echo "set end of fileList to POSIX file \"$f\""; done)" -e "reveal fileList" -e "activate" -e "end tell"' ''', desc = "Reveal file(s) in Finder" },
  { on = "<Enter>", run = "open", desc = "Open selected files" },
  { on = "<S-Enter>", run = "open --interactive", desc = "Open selected files interactively" },
  { on = "y", run = "yank", desc = "Yank selected files (copy)" },
  { on = "x", run = "yank --cut", desc = "Yank selected files (cut)" },
  # { on = "p", run = "paste", desc = "Paste yanked files" },
  { on = "P", run = "paste --force", desc = "Paste yanked files (overwrite if the destination exists)" },
  { on = "+", run = "link", desc = "Symlink the absolute path of yanked files" },
  { on = "_", run = "link --relative", desc = "Symlink the relative path of yanked files" },
  { on = "<C-->", run = "hardlink", desc = "Hardlink yanked files" },
  # { on = "Y", run = "unyank", desc = "Cancel the yank status" },
  { on = "X", run = "unyank", desc = "Cancel the yank status" },
  { on = "d", run = "remove", desc = "Trash selected files" },
  # { on = "D", run = "remove --permanently", desc = "Permanently delete selected files" },
  { on = "a", run = "create", desc = "Create a file (ends with / for directories)" },
  { on = "r", run = "rename --cursor=before_ext", desc = "Rename selected file(s)" },
  # { on = ";", run = "shell --interactive", desc = "Run a shell command" },
  # { on = ":", run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
  { on = ".", run = "hidden toggle", desc = "Toggle the visibility of hidden files" },
  # { on = "s", run = "search --via=fd", desc = "Search files by name via fd" },
  # { on = "S", run = "search --via=rg", desc = "Search files by content via ripgrep" },
  { on = "<C-s>", run = "escape --search", desc = "Cancel the ongoing search" },
  { on = ";", run = "plugin zoxide", desc = "Jump to a directory via zoxide" },
  { on = "z", run = "plugin fzf", desc = "Jump to a file/directory via fzf" },
  { on = "W", run = "plugin skim", desc = "Jump to a file/directory via skim" },
  { on = ":", run = "plugin jump-back", desc = "Jump to previous directory" },
  { on = [
    "g",
    "h",
  ], run = "cd ~", desc = "Go to home directory" },
  { on = [
    "g",
    "r",
  ], run = "cd /", desc = "Go to root directory" },
  { on = [
    "g",
    "t",
  ], run = "cd '~/tasks/1-‚≠ê in-progress/'", desc = "Go to tasks directory" },

  # Linemode
  { on = [
    "u",
    "s",
  ], run = "linemode size", desc = "Linemode: size" },
  { on = [
    "u",
    "p",
  ], run = "linemode permissions", desc = "Linemode: permissions" },
  { on = [
    "u",
    "b",
  ], run = "linemode btime", desc = "Linemode: btime" },
  { on = [
    "u",
    "m",
  ], run = "linemode mtime", desc = "Linemode: mtime" },
  { on = [
    "u",
    "o",
  ], run = "linemode owner", desc = "Linemode: owner" },
  { on = [
    "u",
    "n",
  ], run = "linemode none", desc = "Linemode: none" },
  { on = [
    "u",
    "l",
  ], run = "linemode linecount", desc = "Linemode: line count" },
  { on = [
    "u",
    "r",
  ], run = "linemode recency", desc = "Linemode: recency (r if modified in 24h)" },

  # Copy
  { on = [
    "c",
    "c",
  ], run = "plugin copy-with-notify -- relative", desc = "Copy the file path relative to home" },
  { on = [
    "c",
    "d",
  ], run = "plugin copy-with-notify -- dirname", desc = "Copy the directory path" },
  { on = [
    "c",
    "C",
  ], run = "plugin copy-with-notify -- path", desc = "Copy the full path" },
  { on = [
    "c",
    "n",
  ], run = "plugin copy-with-notify -- filename", desc = "Copy the filename" },
  { on = [
    "c",
    "N",
  ], run = "plugin copy-with-notify -- name_without_ext", desc = "Copy the filename without extension" },

  # Filter
  { on = "i", run = "filter --smart", desc = "Filter files" },

  # Find
  { on = "/", run = "find --smart", desc = "Find next file" },
  { on = "?", run = "find --previous --smart", desc = "Find previous file" },
  { on = "n", run = "find_arrow", desc = "Goto the next found" },
  { on = "N", run = "find_arrow --previous", desc = "Goto the previous found" },

  # Sorting
  { on = [
    "b",
    "0",
  ], run = [
    "sort alphabetical --reverse=no",
    "linemode none",
    "plugin pref-by-location -- save",
  ], desc = "Sort alphabetically (default)" },
  { on = [
    "b",
    "b",
  ], run = [
    "sort mtime --reverse",
    "linemode recency",
    "plugin pref-by-location -- save",
  ], desc = "Sort by modified time (newest first)" },
  { on = [
    "b",
    "m",
  ], run = [
    "sort mtime --reverse=no",
    "linemode mtime",
    "plugin pref-by-location -- save",
  ], desc = "Sort by modified time" },
  { on = [
    "b",
    "M",
  ], run = [
    "sort mtime --reverse",
    "linemode mtime",
    "plugin pref-by-location -- save",
  ], desc = "Sort by modified time (reverse)" },
  { on = [
    "b",
    ",",
  ], run = [
    "sort alphabetical --reverse=no",
    "linemode daysfrom",
    "plugin pref-by-location -- save",
  ], desc = "Calendar mode (days from today)" },
  { on = [
    "b",
    "c",
  ], run = [
    "sort btime --reverse=no",
    "linemode btime",
  ], desc = "Sort by birth time" },
  { on = [
    "b",
    "C",
  ], run = [
    "sort btime --reverse",
    "linemode btime",
  ], desc = "Sort by birth time (reverse)" },
  { on = [
    "b",
    "e",
  ], run = "sort extension --reverse=no", desc = "Sort by extension" },
  { on = [
    "b",
    "E",
  ], run = "sort extension --reverse", desc = "Sort by extension (reverse)" },
  { on = [
    "b",
    "a",
  ], run = [
    "sort alphabetical --reverse=no",
    "plugin pref-by-location -- save",
  ], desc = "Sort alphabetically" },
  { on = [
    "b",
    "A",
  ], run = [
    "sort alphabetical --reverse",
    "plugin pref-by-location -- save",
  ], desc = "Sort alphabetically (reverse)" },
  { on = [
    "b",
    "n",
  ], run = [
    "sort natural --reverse=no",
    "plugin pref-by-location -- save",
  ], desc = "Sort naturally" },
  { on = [
    "b",
    "N",
  ], run = [
    "sort natural --reverse",
    "plugin pref-by-location -- save",
  ], desc = "Sort naturally (reverse)" },
  { on = [
    "b",
    "s",
  ], run = [
    "sort size --reverse=no",
    "linemode size",
  ], desc = "Sort by size" },
  { on = [
    "b",
    "S",
  ], run = [
    "sort size --reverse",
    "linemode size",
  ], desc = "Sort by size (reverse)" },
  { on = [
    "b",
    "r",
  ], run = "sort random --reverse=no", desc = "Sort randomly" },

  # Goto
  # { on = [
  #   "g",
  #   "h",
  # ], run = "cd ~", desc = "Go home" },
  # { on = [
  #   "g",
  #   "c",
  # ], run = "cd ~/dotfiles/", desc = "Goto dotfiles" },

  # { on = [
  #   "g",
  #   "d",
  # ], run = "cd ~/dev/", desc = "Goto dev-projects" },
  # { on = [
  #   "g",
  #   "<Space>",
  # ], run = "cd --interactive", desc = "Jump interactively" },
  # { on = [
  #   "g",
  #   "o",
  # ], run = "cd ~/iCloud~md~obsidian/Documents/Yuval/", desc = "Goto Obsidian" },
  # { on = [
  #   "g",
  #   "a",
  # ], run = "cd /data", desc = "Goto /data" },
  # { on = [
  #   "g",
  #   "v",
  # ], run = "cd ~/vaults-icloud-obsidian/", desc = "Goto Vaults" },
  #
  # Tabs
  { on = "t", run = "tab_create --current", desc = "Create a new tab with CWD" },

  { on = "1", run = "tab_switch 0", desc = "Switch to the first tab" },
  { on = "2", run = "tab_switch 1", desc = "Switch to the second tab" },
  { on = "3", run = "tab_switch 2", desc = "Switch to the third tab" },
  { on = "4", run = "tab_switch 3", desc = "Switch to the fourth tab" },
  { on = "5", run = "tab_switch 4", desc = "Switch to the fifth tab" },
  { on = "6", run = "tab_switch 5", desc = "Switch to the sixth tab" },
  { on = "7", run = "tab_switch 6", desc = "Switch to the seventh tab" },
  { on = "8", run = "tab_switch 7", desc = "Switch to the eighth tab" },
  { on = "9", run = "tab_switch 8", desc = "Switch to the ninth tab" },

  # { on = "1", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
  # { on = "]", run = "tab_switch 1 --relative", desc = "Switch to the next tab" },

  { on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
  { on = "}", run = "tab_swap 1", desc = "Swap current tab with next tab" },

  # Tasks
  { on = "w", run = "tasks_show", desc = "Show task manager" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },

  # Content yanking - new c keybinds
  { on = [
    "c",
    "f",
  ], run = "plugin yank-dir-content", desc = "Yank the content of the selected directory" },
  { on = [
    "c",
    "u",
  ], run = "plugin yank-file", desc = "Yank the content of the selected file" },
  { on = [
    "c",
    "y",
  ], run = "plugin yank-selected-content", desc = "Yank the content of the selected file" },
  { on = [
    "c",
    "t",
  ], run = "plugin tree-to-clipboard", desc = "Copy the tree of the selected directory to the clipboard" },

  # Content yanking - legacy Y keybinds (kept for compatibility)
  { on = [
    "Y",
    "f",
  ], run = "plugin yank-dir-content", desc = "Yank the content of the selected directory" },
  { on = [
    "Y",
    "u",
  ], run = "plugin yank-file", desc = "Yank the content of the selected directory" },
  { on = [
    "Y",
    "y",
  ], run = "plugin yank-selected-content", desc = "Yank the content of the selected file" },
  { on = [
    "Y",
    "d",
  ], run = "plugin diff", desc = "Diff the selected files" },
  { on = [
    "Y",
    "t",
  ], run = "plugin tree-to-clipboard", desc = "Copy the tree of the selected directory to the clipboard" },
  # { on = "T", run = "plugin --sync max-preview", desc = "maximize or restore the preview" },

  # { on = [
  #   "E",
  # ], run = "plugin eza-preview", desc = "Toggle tree/list dir preview" },
  # { on = [
  #   "]",
  # ], run = "plugin eza-preview inc-level", desc = "Increment tree level" },
  # { on = [
  #   "[",
  # ], run = "plugin eza-preview dec-level", desc = "Decrement tree level" },
  # { on = [
  #   "$",
  # ], run = "plugin eza-preview toggle-follow-symlinks", desc = "Toggle tree follow symlinks" },
  # { on = [
  #   "*",
  # ], run = "plugin eza-preview toggle-hidden", desc = "Toggle hidden files" },

]

[tasks]

keymap = [
  { on = "<Esc>", run = "close", desc = "Close task manager" },
  { on = "<C-[>", run = "close", desc = "Close task manager" },
  { on = "<C-c>", run = "close", desc = "Close task manager" },
  { on = "w", run = "close", desc = "Close task manager" },

  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Enter>", run = "inspect", desc = "Inspect the task" },
  { on = "x", run = "cancel", desc = "Cancel the task" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[spot]

keymap = [
  { on = "<Esc>", run = "close", desc = "Close the spot" },
  { on = "<C-[>", run = "close", desc = "Close the spot" },
  { on = "<C-c>", run = "close", desc = "Close the spot" },
  { on = "<Tab>", run = "close", desc = "Close the spot" },

  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },
  { on = "h", run = "swipe -1", desc = "Swipe to the next file" },
  { on = "l", run = "swipe 1", desc = "Swipe to the previous file" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },
  { on = "<Left>", run = "swipe -1", desc = "Swipe to the next file" },
  { on = "<Right>", run = "swipe 1", desc = "Swipe to the previous file" },

  # Copy
  { on = ["c", "c"], run = "copy cell", desc = "Copy selected cell" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[pick]

keymap = [
  { on = "<Esc>", run = "close", desc = "Cancel pick" },
  { on = "<C-[>", run = "close", desc = "Cancel pick" },
  { on = "<C-c>", run = "close", desc = "Cancel pick" },
  { on = "<Enter>", run = "close --submit", desc = "Submit the pick" },

  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[input]

keymap = [
  { on = "<C-c>", run = "close", desc = "Cancel input" },
  { on = "<Enter>", run = "close --submit", desc = "Submit input" },
  { on = "<Esc>", run = "escape", desc = "Go back the normal mode, or cancel input" },
  { on = "<C-[>", run = "escape", desc = "Go back the normal mode, or cancel input" },

  # Mode
  { on = "i", run = "insert", desc = "Enter insert mode" },
  { on = "a", run = "insert --append", desc = "Enter append mode" },
  { on = "I", run = [
    "move -999",
    "insert",
  ], desc = "Move to the BOL, and enter insert mode" },
  { on = "A", run = [
    "move 999",
    "insert --append",
  ], desc = "Move to the EOL, and enter append mode" },
  { on = "v", run = "visual", desc = "Enter visual mode" },
  { on = "V", run = [
    "move -999",
    "visual",
    "move 999",
  ], desc = "Enter visual mode and select all" },

  # Character-wise movement
  { on = "h", run = "move -1", desc = "Move back a character" },
  { on = "l", run = "move 1", desc = "Move forward a character" },
  { on = "<Left>", run = "move -1", desc = "Move back a character" },
  { on = "<Right>", run = "move 1", desc = "Move forward a character" },
  { on = "<C-b>", run = "move -1", desc = "Move back a character" },
  { on = "<C-f>", run = "move 1", desc = "Move forward a character" },

  # Word-wise movement
  { on = "b", run = "backward", desc = "Move back to the start of the current or previous word" },
  { on = "w", run = "forward", desc = "Move forward to the start of the next word" },
  { on = "e", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },
  { on = "<A-b>", run = "backward", desc = "Move back to the start of the current or previous word" },
  { on = "<A-f>", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },

  # Line-wise movement
  { on = "0", run = "move -999", desc = "Move to the BOL" },
  { on = "$", run = "move 999", desc = "Move to the EOL" },
  { on = "<C-a>", run = "move -999", desc = "Move to the BOL" },
  { on = "<C-e>", run = "move 999", desc = "Move to the EOL" },
  { on = "<Home>", run = "move -999", desc = "Move to the BOL" },
  { on = "<End>", run = "move 999", desc = "Move to the EOL" },

  # Delete
  { on = "<Backspace>", run = "backspace", desc = "Delete the character before the cursor" },
  { on = "<Delete>", run = "backspace --under", desc = "Delete the character under the cursor" },
  # { on = "<C-h>", run = "backspace", desc = "Delete the character before the cursor" },
  # { on = "<C-d>", run = "backspace --under", desc = "Delete the character under the cursor" },

  # Kill
  { on = "<C-u>", run = "kill bol", desc = "Kill backwards to the BOL" },
  { on = "<C-k>", run = "kill eol", desc = "Kill forwards to the EOL" },
  { on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
  { on = "<A-d>", run = "kill forward", desc = "Kill forwards to the end of the current word" },

  # Cut/Yank/Paste
  { on = "d", run = "delete --cut", desc = "Cut the selected characters" },
  { on = "D", run = [
    "delete --cut",
    "move 999",
  ], desc = "Cut until the EOL" },
  { on = "c", run = "delete --cut --insert", desc = "Cut the selected characters, and enter insert mode" },
  { on = "C", run = [
    "delete --cut --insert",
    "move 999",
  ], desc = "Cut until the EOL, and enter insert mode" },
  { on = "x", run = [
    "delete --cut",
    "move 1 --in-operating",
  ], desc = "Cut the current character" },
  { on = "y", run = "yank", desc = "Copy the selected characters" },
  { on = "p", run = "paste", desc = "Paste the copied characters after the cursor" },
  { on = "P", run = "paste --before", desc = "Paste the copied characters before the cursor" },

  # Undo/Redo
  { on = "u", run = "undo", desc = "Undo the last operation" },
  { on = "<C-r>", run = "redo", desc = "Redo the last operation" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[confirm]

keymap = [
  { on = "<Esc>", run = "close", desc = "Cancel the confirm" },
  { on = "<C-[>", run = "close", desc = "Cancel the confirm" },
  { on = "<C-c>", run = "close", desc = "Cancel the confirm" },
  { on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

  { on = "n", run = "close", desc = "Cancel the confirm" },
  { on = "y", run = "close --submit", desc = "Submit the confirm" },

  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[cmp]

keymap = [
  { on = "<C-c>", run = "close", desc = "Cancel completion" },
  { on = "<Tab>", run = "close --submit", desc = "Submit the completion" },
  { on = "<Enter>", run = [
    "close --submit",
    "close_input --submit",
  ], desc = "Submit the completion and input" },

  { on = "<A-k>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<A-j>", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  { on = "<C-p>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<C-n>", run = "arrow 1", desc = "Move cursor down" },

  # Help
  { on = "~", run = "help", desc = "Open help" },
  { on = "<F1>", run = "help", desc = "Open help" },
]

[help]

keymap = [
  { on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
  { on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
  { on = "<C-c>", run = "close", desc = "Hide the help" },

  # Navigation
  { on = "k", run = "arrow -1", desc = "Move cursor up" },
  { on = "j", run = "arrow 1", desc = "Move cursor down" },

  { on = "<Up>", run = "arrow -1", desc = "Move cursor up" },
  { on = "<Down>", run = "arrow 1", desc = "Move cursor down" },

  # Filtering
  { on = "i", run = "filter", desc = "Apply a filter for the help items" },
]

[[mgr.prepend_keymap]]
on = ["f"]
run = "plugin keyjump global"
desc = "Keyjump (Global mode)"

# Date filtering for calendar
[[mgr.prepend_keymap]]
on = [",", ","]
run = "plugin calendar-jump today"
desc = "Jump to today's calendar"

[[mgr.prepend_keymap]]
on = [",", "t"]
run = "plugin date-filter today"
desc = "Filter: Today"

[[mgr.prepend_keymap]]
on = [",", "W"]
run = "plugin date-filter week"
desc = "Filter: This week"

[[mgr.prepend_keymap]]
on = [",", "w"]
run = "plugin date-filter week-ahead"
desc = "Filter: Next 7 days"

[[mgr.prepend_keymap]]
on = [",", "2"]
run = "plugin date-filter twoweeks"
desc = "Filter: Next 2 weeks"

[[mgr.prepend_keymap]]
on = [",", "m"]
run = "plugin date-filter month"
desc = "Filter: This month"

[[mgr.prepend_keymap]]
on = [",", "y"]
run = "plugin date-filter year"
desc = "Filter: This year"

# Calendar tag update
[[mgr.prepend_keymap]]
on = [",", "u"]
run = "plugin mactag-unified calendar"
desc = "Update calendar tags"


[[mgr.prepend_keymap]]
on = ["`"]
run = "plugin  first-non-directory"
desc = "Jumps to the first file"

# [[manager.prepend_keymap]]
# on = "W"
# run = 'plugin minimal-select'

# [[manager.prepend_keymap]]
# on = "Z"
# run = 'plugin selected-files'

# [[manager.prepend_keymap]]
# on = "z"
# run = 'plugin preset-paths-fzf'

[[mgr.prepend_keymap]]
on = "s"
run = 'plugin selected-files-fzf'

# [[mgr.prepend_keymap]]
# on = "u"
# run = 'plugin hardcoded-files-fzf'


# [[mgr.prepend_keymap]]
# on = "Q"
# run = 'plugin fzf-orig'


# keymap.toml
[[mgr.prepend_keymap]]
on = "e"
run = "plugin toggle-pane max-preview"
desc = "Maximize or restore the preview pane"


# [[mgr.prepend_keymap]]
# on = ["t", "t", "k"]
# run = "plugin simple-tag -- toggle-tag"
# desc = "Toggle a tag (press any key)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "a", "k"]
# run = "plugin simple-tag -- add-tag"
# desc = "Add a tag (press any key)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "d", "k"]
# run = "plugin simple-tag -- remove-tag"
# desc = "Remove a tag (press any key)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "r", "k"]
# run = "plugin simple-tag -- replace-tag"
# desc = "Replace with a new tag (press any key)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "e"]
# run = "plugin simple-tag -- edit-tag"
# desc = "Edit tag(s) (input box)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "c"]
# run = "plugin simple-tag -- clear"
# desc = "Clear all tags from selected or hovered files"
#
# [[mgr.prepend_keymap]]
# on = ["t", "u", "s"]
# run = "plugin simple-tag -- toggle-ui"
# desc = "Toggle tag indicator (icon > tag key > hidden)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "f"]
# run = "plugin simple-tag -- filter"
# desc = "Filter files/folders by a tag (press any key)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "F"]
# run = "plugin simple-tag -- filter --input"
# desc = "Filter files/folders by tag(s) (input box)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "t"]
# run = "plugin simple-tag -- toggle-select"
# desc = "Select a selection action then select a tag key (toggle-select)"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "r"]
# run = "plugin simple-tag -- replace-select"
# desc = "replace-select"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "u"]
# run = "plugin simple-tag -- unite-select"
# desc = "unite-select"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "i"]
# run = "plugin simple-tag -- intersect-select"
# desc = "intersect-select"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "s"]
# run = "plugin simple-tag -- subtract-select"
# desc = "subtract-select"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "e"]
# run = "plugin simple-tag -- exclude-select"
# desc = "exclude-select"
#
# [[mgr.prepend_keymap]]
# on = ["t", "s", "u"]
# run = "plugin simple-tag -- undo-select"
# desc = "Undos/Redos the last selection action"

# [[mgr.prepend_keymap]]
# desc = "Bunny hop (fuzzy search)"
# on = ";"
# run = "plugin bunny"
#
# [[mgr.prepend_keymap]]
# desc = "Save current directory"
# on = [":", "s"]
# run = "plugin bunny save"
#
# [[mgr.prepend_keymap]]
# desc = "Delete a hop"
# on = [":", "d"]
# run = "plugin bunny delete"

# [[mgr.prepend_keymap]]
# on = "F"
# run = "plugin smart-filter"
# desc = "Smart filter"

[[mgr.prepend_keymap]]
on = ["c", "m"]
run = "plugin chmod"
desc = "Chmod on selected files"

[[mgr.prepend_keymap]]
on = "Z"
run = "plugin fr rg"
desc = "Search file by content (rg)"

# [[mgr.prepend_keymap]]
# on = ["u", "a"]
# run = "plugin fr rga"
# desc = "Search file by content (rga)"

# [[mgr.prepend_keymap]]
# on = ["u", "u"]
# run = "plugin fr rg_files"
# desc = "Search files by content (show files only)"
#
# [[mgr.prepend_keymap]]
# on = ["u", "h"]
# run = "plugin fr rg_files_hello"
# desc = "Search files containing 'hello'"
#
[[mgr.prepend_keymap]]
on = "p"
run = "plugin smart-paste"
desc = "Paste into the hovered directory or CWD"

[[mgr.prepend_keymap]]
on = "P"
run = "paste"
desc = "regular paste"

# [[mgr.prepend_keymap]]
# on = "S"
# run = '''
# 	shell 'filename=$(basename "$0"); /Users/yuvalspiegel/dotfiles/.config/sketchybar/plugins/spotify_play_saved.sh "$filename"' --block
# '''
# desc = "Play Spotify track from saved file"

# [[mgr.prepend_keymap]]
# on = "b"
# run = "open --interactive extract"
# desc = "Extract archive"

[[mgr.prepend_keymap]]
on = "D"
run = "plugin diff"
desc = "Diff the selected with the hovered file"


# keymap.toml
[[mgr.prepend_keymap]]
on = ["g", "c"]
run = "plugin vcs-files-all"
desc = "Show Git file changes (including untracked)"

[[mgr.prepend_keymap]]
on = "Q"
run = "plugin quit-cd"
desc = "Quit and change directory"

# Task management

[[mgr.prepend_keymap]]
on = ["t", "t"]
run = '''
	shell --confirm 'file="$@"; ~/.config/sketchybar/task-link set "$file"'
'''
desc = "Set current file/folder as active task"

[[mgr.prepend_keymap]]
on = ["t", "c"]
run = 'shell "~/.config/sketchybar/task-link clear" --block'
desc = "Clear current task"

[[mgr.prepend_keymap]]
on = ["t", "d"]
run = 'shell --confirm "source ~/.zsh/task-folders.zsh; task_move_done \"$@\""'
desc = "Mark task as done (move to done folder and clear if current)"

[[mgr.prepend_keymap]]
on = ["t", "b"]
run = 'shell --confirm "source ~/.zsh/task-folders.zsh; task_move_backlog \"$@\""'
desc = "Move task to backlog"

[[mgr.prepend_keymap]]
on = ["t", "p"]
run = 'shell --confirm "source ~/.zsh/task-folders.zsh; task_move_progress \"$@\""'
desc = "Move task to progress"

[[mgr.prepend_keymap]]
on = ["t", "w"]
run = 'shell --confirm "source ~/.zsh/task-folders.zsh; task_move_waiting \"$@\""'
desc = "Move task to waiting"

# [[mgr.prepend_keymap]]
# on = ["e", "a"]
# run = "plugin create-task"
# desc = "Create new task file with template"

# [[mgr.prepend_keymap]]
# on = ["t", "i"]
# run = "plugin task-label important"
# desc = "Mark task as important (‚ùó)"

# [[mgr.prepend_keymap]]
# on = "M"
# run = "plugin mark-label"
# desc = "Rotate mark label (‚úÖ ‚Üí ‚ùó ‚Üí üí§ ‚Üí ‚ùå ‚Üí none)"

# Quick tagging: Done on hovered/selected (same as M+d)
[[mgr.prepend_keymap]]
on = "m"
run = "plugin mactag-unified done"
desc = "Tag as Done (‚úÖ) - quick key"

# [[mgr.prepend_keymap]]
# on = ["e", "t"]
# run = "plugin task-label clock"
# desc = "Mark task with clock (‚è∞)"

# Rotating filter (cycles through ‚úÖ ‚Üí ‚ùó ‚Üí üí§ ‚Üí ‚ùå ‚Üí none)
[[mgr.prepend_keymap]]
on = ["<"]
run = "plugin filter-rotate"
desc = "Rotate filter (‚úÖ ‚Üí ‚ùó ‚Üí üí§ ‚Üí ‚ùå ‚Üí none)"

# # Exclude filter red (hide files containing pattern)
# [[mgr.prepend_keymap]]
# on = ["u", "2"]
# run = "plugin filter-out -- üî¥"
# desc = "Exclude files containing hello"

# # include filter 'technion'
# [[mgr.prepend_keymap]]
# on = ["u", "t"]
# run = "plugin filter-in -- technion"
# desc = "Filter with 'technion'"
#
# # include filter 'ose'
# [[mgr.prepend_keymap]]
# on = ["u", "o"]
# run = "plugin filter-in -- ose"
# desc = "Filter with 'ose'"
#
# # include filter 'general'
# [[mgr.prepend_keymap]]
# on = ["u", "g"]
# run = "plugin filter-in -- general"
# desc = "Filter with 'general'"
#
# PDF to images conversion

[[mgr.prepend_keymap]]
on = ["c", "p"]
run = '''
	shell --confirm 'pdf2img-ghostscript "$@"'
'''
desc = "Convert PDF to images using Ghostscript"

# [[mgr.prepend_keymap]]
# on = ["c", "p", "i"]
# run = '''
# 	shell --confirm 'pdf2img-imagemagick "$@"'
# '''
# desc = "Convert PDF to images using ImageMagick"
#
# [[mgr.prepend_keymap]]
# on = ["c", "p", "p"]
# run = '''
# 	shell --confirm 'pdf2img-pdftoppm "$@"'
# '''
# desc = "Convert PDF to images using pdftoppm"

# # View image with kitty icat plugin
# [[mgr.prepend_keymap]]
# on = "I"
# run = "plugin kitty-view"
# desc = "View image(s) with kitty icat (full quality)"

# # Image zoom keymaps
# [[mgr.prepend_keymap]]
# on = "L"
# run = "plugin zoom 1"
# desc = "Zoom in preview image"
#
# [[mgr.prepend_keymap]]
# on = "H"
# run = "plugin zoom -1"
# desc = "Zoom out preview image"


# [[mgr.prepend_keymap]]
# on = "u"
# run = "plugin mactag-toggle toggle"
# desc = "Toggle red tag on selected files"

[[mgr.prepend_keymap]]
on = "J"
run = "plugin mactag-jump next"
desc = "Jump to next tagged file"

[[mgr.prepend_keymap]]
on = "K"
run = "plugin mactag-jump prev"
desc = "Jump to previous tagged file"

[[mgr.prepend_keymap]]
on = "U"
run = "plugin mactag-filter"
desc = "Filter to show only tagged files"

# Unified tagging combos under M
[[mgr.prepend_keymap]]
on = ["M", "r"]
run = "plugin mactag-unified red"
desc = "Tag as Red üî¥"

[[mgr.prepend_keymap]]
on = ["M", "o"]
run = "plugin mactag-unified orange"
desc = "Tag as Orange üü†"

[[mgr.prepend_keymap]]
on = ["M", "y"]
run = "plugin mactag-unified yellow"
desc = "Tag as Yellow üü°"

[[mgr.prepend_keymap]]
on = ["M", "g"]
run = "plugin mactag-unified green"
desc = "Tag as Green üü¢"

[[mgr.prepend_keymap]]
on = ["M", "b"]
run = "plugin mactag-unified blue"
desc = "Tag as Blue üîµ"

[[mgr.prepend_keymap]]
on = ["M", "p"]
run = "plugin mactag-unified purple"
desc = "Tag as Purple üü£"

[[mgr.prepend_keymap]]
on = ["M", "d"]
run = "plugin mactag-unified done"
desc = "Tag as Done (‚úÖ)"

[[mgr.prepend_keymap]]
on = ["M", "i"]
run = "plugin mactag-unified point"
desc = "Tag as Point (üëâ)"

[[mgr.prepend_keymap]]
on = ["M", "s"]
run = "plugin mactag-unified sleep"
desc = "Tag as Sleep (‚è∏Ô∏è)"

[[mgr.prepend_keymap]]
on = ["M", "x"]
run = "plugin mactag-unified x"
desc = "Tag as X (‚ùå)"

[[mgr.prepend_keymap]]
on = ["M", "P"]
run = "plugin mactag-unified point"
desc = "Tag as Point (üëâ)"

[[mgr.prepend_keymap]]
on = ["M", "M"]
run = "plugin mactag-unified none"
desc = "Clear tag"
