# Kitty theme
# Add the theme at the top, any setting below the theme will be overriden
# include ~/github/dotfiles-latest/kitty/themes/themes/ChallengerDeep.conf
# include ~/github/dotfiles-latest/kitty/themes/themes/Catppuccin-Mocha.conf
include ~/github/dotfiles-latest/kitty/themes/themes/Eldritch.conf

font_size 19.0

# Make sure you have the fonts installed
font_family MesloLGM Nerd Font
# font_family MesloLGS Nerd Font

# Kitty's font was more spaced compared to alacritty's, tried font variations
# but it didn't change, so I went with this, it works fine
modify_font cell_width 95%
# modify_font cell_height -2px

scrollback_lines 10000
SCROLLBACK_PAGER nvim --clean -noplugin -n

# The following command checks if tmux is installed.
# If tmux is installed, it automatically attaches to an existing tmux session.
# If no tmux session exists, a new one is created.
# If tmux is not installed, it simply starts zsh without tmux.
# shell zsh --login -c "if command -v tmux >/dev/null 2>&1; then tmux attach || tmux; else zsh; fi"

# Old version of above command:
# The 2 commands after login are needed to automatically attach to an existing 
# tmux session, if no session exists, a new one is created
# shell zsh --login -c "tmux attach || tmux"

# When you do fn+ctrl+shift+2 it opens the kitty file in the editor below
editor /opt/homebrew/bin/nvim

# These colors match what I have in my alacritty theme
# Commenting them as they're set by the theme on the top
# foreground #CDD6F4
# background #1E1E2E

# Make kitty borderless
# "yes" disables round corners and hides the title bar 
# "titlebar-only" leaves round corners but hides title bar
# hide_window_decorations yes
hide_window_decorations titlebar-only

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
window_padding_width 5 5 0 0

# I'm adding these below the theme in case the theme sets them
cursor #ffffff
cursor_text_color #000000

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0

allow_remote_control yes
listen_on unix:/tmp/kitty

shell_integration enabled

map kitty_mod+f kitty_scrollback_nvim --config search

# split tmux window vertically
map cmd+shift+u send_text all \x01\x7c

# split tmux window horizontally
map cmd+u send_text all \x01\x2d


# start tmux search mode
map cmd+shift+f send_text all \x01[/

# open git manager 'jesseduffield/lazygit'
map cmd+g send_text all \x01g

# open t - tmux smart session manager
# map cmd+j send_text all \x01T

# open interactive tmux session client
map cmd+k send_text all \x01s

# open sesh connect manager
map cmd+shift+k send_text all \x01\x54

# switch to the last tmux session
map cmd+p send_text all \x01L

# open URLs 'joshmedeski/tmux-fzf-url'
map cmd+o send_text all \x01u

# files
# map cmd+p send_text all :GoToFile\n

# commands
map cmd+shift+p send_text all :GoToCommand\n

# quit vim <esc> :q
map cmd+w send_text all \x1b\x3a\x71\x0a

# quit vim strong <esc> :q! 
map cmd+q send_text all \x1b\x3a\x71\x21\x0a 

# go to saved version <esc> :e!
map cmd+e send_text all \x1b\x3a\x65\x21\x0a

# save vim buffer <esc> :w
map cmd+s send_text all \x1b:w\n

# create a new tmux window ctrl+a c 
map cmd+t send_text all \x01c

# kill the current pane (exit) 
map cmd+x send_text all \x65\x78\x69\x74\x0a

# toggle zoom state of the current tmux pane
map cmd+z send_text all \x01z

# switch to next tmux window
map ctrl+tab send_text all \x01n

# switch to previous tmux window
map ctrl+grave send_text all \x01\x70

# rename the current tmux window
map cmd+comma send_text all \x01,

# navigate back in vim (ctrl+o)
# map cmd+[ send_text all \x0f

# switch to next tmux window
map cmd+shift+[ send_text all \x01p

# navigate forward in vim (ctrl+i)
# map cmd+] send_text all \x09

# switch to previous tmux window
map cmd+shift+] send_text all \x01n

# enter the tmux command prompt
map cmd+semicolon send_text all \x01:

# select tmux window 1-9
map cmd+1 send_text all \x011
map cmd+2 send_text all \x012
map cmd+3 send_text all \x013
map cmd+4 send_text all \x014
map cmd+5 send_text all \x015
map cmd+6 send_text all \x016
map cmd+7 send_text all \x017
map cmd+8 send_text all \x018
map cmd+9 send_text all \x019

# new vim 
map cmd+n send_text all \x6e\x76\x69\x6d\x0a

# select mode in tmux ([)
map cmd+] send_text all \x01\x5b

# recent files 
map cmd+h send_text all \x1b:Telescope oldfiles\n

# find files 
# map cmd+f send_text all \x1b:Telescope find_files\n

# live grep files 
map cmd+g send_text all \x1b:Telescope live_grep\n 

# iron (jupyter notebook)
# Iron.nvim REPL commands
# map cmd+shift+j send_text all \x1b:IronSmartExecute\n
# map cmd+j send_text all \x1b:IronSmartExecuteAndMove\n
# map cmd+j send_text all :execute "normal \<d-j>"\r

