#!/bin/bash

# Source common configuration
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/pomodoro_common.sh"

# Ensure directory exists
ensure_pomo_dir

# Function to add appropriate emoji to task name
add_emoji_to_task() {
    local task="$1"
    local first_word=$(echo "$task" | awk '{print $1}')
    
    # Check if task already has an emoji (non-ASCII first character)
    # If first word has only ASCII characters, it needs an emoji
    if echo "$first_word" | LC_ALL=C grep -q '^[[:print:]]*$'; then
        # First word is pure ASCII, needs emoji
        :
    else
        # Already has emoji, return as-is
        echo "$task"
        return
    fi
    
    # No emoji, add one based on keywords
    local task_lower=$(echo "$task" | tr '[:upper:]' '[:lower:]')
    
    # Check against emoji mappings
    local emoji=$(get_emoji_for_keyword "$task_lower")
    if [ -n "$emoji" ]; then
        echo "$emoji $task"
    else
        # No keyword match, return task without emoji
        # Let task.sh handle random emoji assignment
        echo "$task"
    fi
}

# Initialize files with defaults if they don't exist
[ ! -f "$TITLE_FILE" ] && echo "$DEFAULT_TASK" > "$TITLE_FILE"
[ ! -f "$WORK_TIME_FILE" ] && echo "$DEFAULT_WORK_TIME" > "$WORK_TIME_FILE"
[ ! -f "$BREAK_TIME_FILE" ] && echo "$DEFAULT_BREAK_TIME" > "$BREAK_TIME_FILE"

# Check if fzf is available
HAS_FZF=$(command -v fzf >/dev/null 2>&1 && echo "yes" || echo "no")

# Interactive mode if no arguments
if [ $# -eq 0 ]; then
    echo "üçÖ Pomodoro Timer Configuration"
    echo "=============================="
    echo ""
    
    # Show current settings
    CURRENT_TASK=$(cat "$TITLE_FILE")
    CURRENT_WORK=$(cat "$WORK_TIME_FILE")
    CURRENT_BREAK=$(cat "$BREAK_TIME_FILE")
    CURRENT_DEBUG=$(is_debug_mode && echo "enabled" || echo "disabled")
    
    echo "Current settings:"
    echo "  üìù Task: $CURRENT_TASK"
    echo "  üçÖ Work time: $CURRENT_WORK minutes"
    echo "  ‚òïÔ∏è Break time: $CURRENT_BREAK minutes"
    echo "  üêõ Debug mode: $CURRENT_DEBUG"
    echo ""
    
    # Step 1: Select task first
    echo "Step 1: Choose your task"
    echo "------------------------"
    
    if [ "$HAS_FZF" = "yes" ]; then
        # Use fzf for task selection
        echo "Select or enter task:"
        
        # Build task list
        task_list=""
        
        # Add current task
        task_list="[CURRENT] $CURRENT_TASK\n"
        
        # Add recent tasks
        while IFS= read -r recent_task; do
            if [ -n "$recent_task" ] && [ "$recent_task" != "$CURRENT_TASK" ]; then
                task_list="${task_list}${recent_task}\n"
            fi
        done < <(get_recent_tasks 10)
        
        # Show fzf with print-query to allow custom input
        result=$(echo -e "$task_list" | fzf --height=12 --layout=reverse --prompt="Task> " --print-query --preview-window=hidden)
        
        # fzf returns query on first line, selection on second
        query=$(echo "$result" | head -1)
        selection=$(echo "$result" | tail -1)
        
        if [ -n "$selection" ]; then
            # User selected an item
            if [[ "$selection" == "[CURRENT] "* ]]; then
                NEW_TITLE=""  # Keep current
            else
                NEW_TITLE="$selection"
            fi
        elif [ -n "$query" ]; then
            # User typed custom text
            NEW_TITLE="$query"
        fi
    else
        # Fallback to numbered menu
        echo "Recent tasks:"
        recent_idx=1
        recent_tasks=""
        while IFS= read -r recent_task; do
            if [ -n "$recent_task" ]; then
                echo "  $recent_idx) $recent_task"
                recent_tasks="$recent_tasks$recent_idx:$recent_task|"
                ((recent_idx++))
            fi
        done < <(get_recent_tasks 5)
        
        echo ""
        echo "Enter task:"
        echo "  - Number (1-$((recent_idx-1))) for recent task"
        echo "  - Text for new task"
        echo "  - Enter to keep current"
        echo -n "> "
        read NEW_TITLE
        
        # Check if user entered a number for recent task
        if [[ "$NEW_TITLE" =~ ^[0-9]+$ ]]; then
            selected_recent=$(echo "$recent_tasks" | grep -o "${NEW_TITLE}:[^|]*" | cut -d: -f2-)
            if [ -n "$selected_recent" ]; then
                NEW_TITLE="$selected_recent"
            fi
        fi
    fi
    
    # Step 2: Select timing preset
    echo ""
    echo "Step 2: Choose timing"
    echo "--------------------"
    
    if [ "$HAS_FZF" = "yes" ]; then
        # Use fzf for preset selection
        echo "Select preset (or press Esc for custom values):"
        
        # Build preset list for fzf
        preset_list=""
        while IFS= read -r preset_name; do
            desc=$(get_preset "$preset_name" "desc")
            work=$(get_preset "$preset_name" "work")
            break=$(get_preset "$preset_name" "break")
            preset_list="${preset_list}${preset_name}|${desc} (${work}/${break} mins)\n"
        done < <(list_presets)
        
        # Show fzf and get selection
        selected_line=$(echo -e "$preset_list" | fzf --height=10 --layout=reverse --prompt="Preset> " --preview-window=hidden)
        
        if [ -n "$selected_line" ]; then
            # Extract preset name (before the |)
            selected=$(echo "$selected_line" | cut -d'|' -f1)
            NEW_WORK_TIME=$(get_preset "$selected" "work")
            NEW_BREAK_TIME=$(get_preset "$selected" "break")
            preset_desc=$(get_preset "$selected" "desc")
            echo "Using $preset_desc"
        else
            # Custom values
            echo ""
            echo -n "Enter work time in minutes (or press Enter for $CURRENT_WORK): "
            read NEW_WORK_TIME
            
            echo -n "Enter break time in minutes (or press Enter for $CURRENT_BREAK): "
            read NEW_BREAK_TIME
        fi
    else
        # Fallback to numbered menu
        echo "Quick presets:"
        idx=1
        preset_names=""
        
        # Show presets
        while IFS= read -r preset_name; do
            if [ $idx -le 9 ]; then
                desc=$(get_preset "$preset_name" "desc")
                echo "  $idx) $desc"
                preset_names="$preset_names$idx:$preset_name|"
                ((idx++))
            fi
        done < <(list_presets)
        
        echo "  C) Custom values"
        echo ""
        echo -n "Choose preset (1-$((idx-1)) or C for custom): "
        read PRESET
        
        case "$PRESET" in
            [1-9])
                # Extract preset name from stored string
                selected=$(echo "$preset_names" | grep -o "${PRESET}:[^|]*" | cut -d: -f2)
                if [ -n "$selected" ]; then
                    NEW_WORK_TIME=$(get_preset "$selected" "work")
                    NEW_BREAK_TIME=$(get_preset "$selected" "break")
                    preset_desc=$(get_preset "$selected" "desc")
                    echo "Using $preset_desc"
                fi
                ;;
            [Cc]|*)
                echo ""
                echo -n "Enter work time in minutes (or press Enter for $CURRENT_WORK): "
                read NEW_WORK_TIME
                
                echo -n "Enter break time in minutes (or press Enter for $CURRENT_BREAK): "
                read NEW_BREAK_TIME
                ;;
        esac
    fi
    
    
    echo -n "Enable debug mode? (y/N): "
    read DEBUG_RESPONSE
    
    # Apply changes
    if [ -n "$NEW_TITLE" ]; then
        NEW_TITLE=$(add_emoji_to_task "$NEW_TITLE")
        echo "$NEW_TITLE" > "$TITLE_FILE"
        # Update task display in sketchybar
        bash "$SCRIPT_DIR/plugins/task.sh"
    fi
    [ -n "$NEW_WORK_TIME" ] && echo "$NEW_WORK_TIME" > "$WORK_TIME_FILE"
    [ -n "$NEW_BREAK_TIME" ] && echo "$NEW_BREAK_TIME" > "$BREAK_TIME_FILE"
    
    if [[ "$DEBUG_RESPONSE" =~ ^[Yy]$ ]]; then
        touch "$DEBUG_FILE"
    elif [[ "$DEBUG_RESPONSE" =~ ^[Nn]$ ]]; then
        rm -f "$DEBUG_FILE"
    fi
    
    echo ""
    echo "Settings updated!"
    echo ""
    echo "Final settings:"
    echo "  Task: $(cat "$TITLE_FILE")"
    echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
    echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
    echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"
    exit 0
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--name)
            TITLE="$2"
            shift 2
            ;;
        --wt|--work-time)
            WORK_TIME="$2"
            shift 2
            ;;
        --bt|--break-time)
            BREAK_TIME="$2"
            shift 2
            ;;
        --preset)
            PRESET_NAME="$2"
            WORK_TIME=$(get_preset "$PRESET_NAME" "work")
            BREAK_TIME=$(get_preset "$PRESET_NAME" "break")
            if [ -z "$WORK_TIME" ]; then
                echo "Error: Unknown preset '$PRESET_NAME'"
                echo "Use 'pomo --presets' to see available presets"
                exit 1
            fi
            # Set task name with preset emoji if not already set
            if [ -z "$TITLE" ]; then
                PRESET_EMOJI=$(get_preset "$PRESET_NAME" "emoji")
                TITLE="$PRESET_EMOJI $PRESET_NAME session"
            fi
            shift 2
            ;;
        --debug)
            DEBUG="1"
            shift
            ;;
        --emoji)
            echo "üéØ Emoji Keyword Mappings:"
            echo ""
            if [ -f "$CONFIG_DIR/emoji_mappings.conf" ]; then
                while IFS='=' read -r key value; do
                    [[ "$key" =~ ^[[:space:]]*# ]] && continue
                    [[ -z "$key" ]] && continue
                    key=$(echo "$key" | xargs)
                    value=$(echo "$value" | xargs)
                    if [ "$key" != "default" ]; then
                        printf "  %-15s %s\n" "$key" "$value"
                    fi
                done < "$CONFIG_DIR/emoji_mappings.conf"
                echo ""
                echo "Default emoji: $DEFAULT_EMOJI"
            fi
            exit 0
            ;;
        --presets)
            echo "‚è±Ô∏è  Available Presets:"
            echo ""
            while IFS= read -r preset; do
                desc=$(get_preset "$preset" "desc")
                work=$(get_preset "$preset" "work")
                break=$(get_preset "$preset" "break")
                emoji=$(get_preset "$preset" "emoji")
                printf "  %-12s %s (%s/%s mins)\n" "$preset" "$desc" "$work" "$break"
            done < <(list_presets)
            exit 0
            ;;
        --fzf)
            # Quick fzf mode - select task from recent
            if [ "$HAS_FZF" = "yes" ]; then
                # Get recent tasks
                selected_task=$(get_recent_tasks 20 | fzf --height=15 --layout=reverse --prompt="Select task> " --preview-window=hidden)
                if [ -n "$selected_task" ]; then
                    pomo -n "$selected_task"
                fi
            else
                echo "Error: fzf is not installed"
                echo "Install with: brew install fzf"
                exit 1
            fi
            exit 0
            ;;
        -h|--help)
            echo "Usage: pomo [options]"
            echo "Options:"
            echo "  -n, --name NAME          Set the task name/title"
            echo "  --wt, --work-time MINS   Set work session duration in minutes"
            echo "  --bt, --break-time MINS  Set break session duration in minutes"
            echo "  --preset NAME            Use a preset configuration"
            echo "  --fzf                    Quick task selection with fzf"
            echo "  --debug                  Enable debug mode (1 second timers)"
            echo "  --emoji                  Show emoji mappings"
            echo "  --presets                Show available presets"
            echo "  -h, --help               Show this help message"
            echo ""
            echo "Current settings:"
            echo "  Task: $(cat "$TITLE_FILE")"
            echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
            echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
            echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use 'pomo --help' for usage information"
            exit 1
            ;;
    esac
done

# Update files if values were provided
if [ -n "$TITLE" ]; then
    # Ensure all tasks have an icon prefix
    # This centralizes icon logic here instead of in pomodoro.sh
    TITLE=$(add_emoji_to_task "$TITLE")
    echo "$TITLE" > "$TITLE_FILE"
    # Update task display in sketchybar
    bash "$SCRIPT_DIR/plugins/task.sh"
fi
[ -n "$WORK_TIME" ] && echo "$WORK_TIME" > "$WORK_TIME_FILE"
[ -n "$BREAK_TIME" ] && echo "$BREAK_TIME" > "$BREAK_TIME_FILE"
if [ -n "$DEBUG" ]; then
    if [ "$DEBUG" = "1" ]; then
        touch "$DEBUG_FILE"
    else
        rm -f "$DEBUG_FILE"
    fi
fi

# Show current settings
echo "Pomodoro settings updated:"
echo "  Task: $(cat "$TITLE_FILE")"
echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"