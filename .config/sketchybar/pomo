#!/bin/bash

# Source common configuration
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/pomodoro_common.sh"

# Ensure directory exists
ensure_pomo_dir

# Function to add appropriate emoji to task name
add_emoji_to_task() {
    local task="$1"
    local first_word=$(echo "$task" | awk '{print $1}')
    
    # Check if task already has an emoji (non-ASCII first character)
    # If first word has only ASCII characters, it needs an emoji
    if echo "$first_word" | LC_ALL=C grep -q '^[[:print:]]*$'; then
        # First word is pure ASCII, needs emoji
        :
    else
        # Already has emoji, return as-is
        echo "$task"
        return
    fi
    
    # No emoji, add one based on keywords
    local task_lower=$(echo "$task" | tr '[:upper:]' '[:lower:]')
    
    # Check against emoji mappings
    local emoji=$(get_emoji_for_keyword "$task_lower")
    if [ -n "$emoji" ]; then
        echo "$emoji $task"
    else
        # No keyword match, use default
        echo "$DEFAULT_EMOJI $task"
    fi
}

# Initialize files with defaults if they don't exist
[ ! -f "$TITLE_FILE" ] && echo "$DEFAULT_TASK" > "$TITLE_FILE"
[ ! -f "$WORK_TIME_FILE" ] && echo "$DEFAULT_WORK_TIME" > "$WORK_TIME_FILE"
[ ! -f "$BREAK_TIME_FILE" ] && echo "$DEFAULT_BREAK_TIME" > "$BREAK_TIME_FILE"

# Interactive mode if no arguments
if [ $# -eq 0 ]; then
    echo "üçÖ Pomodoro Timer Configuration"
    echo "=============================="
    echo ""
    
    # Show current settings
    CURRENT_TASK=$(cat "$TITLE_FILE")
    CURRENT_WORK=$(cat "$WORK_TIME_FILE")
    CURRENT_BREAK=$(cat "$BREAK_TIME_FILE")
    CURRENT_DEBUG=$(is_debug_mode && echo "enabled" || echo "disabled")
    
    echo "Current settings:"
    echo "  üìù Task: $CURRENT_TASK"
    echo "  üçÖ Work time: $CURRENT_WORK minutes"
    echo "  ‚òïÔ∏è Break time: $CURRENT_BREAK minutes"
    echo "  üêõ Debug mode: $CURRENT_DEBUG"
    echo ""
    
    # Display available presets
    echo "Quick presets:"
    local idx=1
    local preset_names=""
    
    # Show presets
    while IFS= read -r preset_name; do
        if [ $idx -le 9 ]; then
            local desc=$(get_preset "$preset_name" "desc")
            echo "  $idx) $desc"
            preset_names="$preset_names$idx:$preset_name|"
            ((idx++))
        fi
    done < <(list_presets)
    
    echo "  C) Custom values"
    echo ""
    echo -n "Choose preset (1-$((idx-1)) or C for custom): "
    read PRESET
    
    case "$PRESET" in
        [1-9])
            # Extract preset name from stored string
            local selected=$(echo "$preset_names" | grep -o "${PRESET}:[^|]*" | cut -d: -f2)
            if [ -n "$selected" ]; then
                NEW_WORK_TIME=$(get_preset "$selected" "work")
                NEW_BREAK_TIME=$(get_preset "$selected" "break")
                local preset_desc=$(get_preset "$selected" "desc")
                echo "Using $preset_desc"
                
                # Auto-suggest task name with preset emoji if current task is default
                if [ "$CURRENT_TASK" = "$DEFAULT_TASK" ] || [ "$CURRENT_TASK" = "$DEFAULT_EMOJI $DEFAULT_TASK" ]; then
                    local preset_emoji=$(get_preset "$selected" "emoji")
                    SUGGESTED_TASK="$preset_emoji $selected session"
                fi
            fi
            ;;
        [Cc]|*)
            echo ""
            echo -n "Enter work time in minutes (or press Enter for $CURRENT_WORK): "
            read NEW_WORK_TIME
            
            echo -n "Enter break time in minutes (or press Enter for $CURRENT_BREAK): "
            read NEW_BREAK_TIME
            ;;
    esac
    
    echo ""
    if [ -n "$SUGGESTED_TASK" ]; then
        echo -n "Enter task name (or press Enter for '$SUGGESTED_TASK'): "
    else
        echo -n "Enter task name (or press Enter to keep current): "
    fi
    read NEW_TITLE
    
    # Use suggested task if available and no input given
    if [ -z "$NEW_TITLE" ] && [ -n "$SUGGESTED_TASK" ]; then
        NEW_TITLE="$SUGGESTED_TASK"
    fi
    
    echo -n "Enable debug mode? (y/N): "
    read DEBUG_RESPONSE
    
    # Apply changes
    if [ -n "$NEW_TITLE" ]; then
        NEW_TITLE=$(add_emoji_to_task "$NEW_TITLE")
        echo "$NEW_TITLE" > "$TITLE_FILE"
    fi
    [ -n "$NEW_WORK_TIME" ] && echo "$NEW_WORK_TIME" > "$WORK_TIME_FILE"
    [ -n "$NEW_BREAK_TIME" ] && echo "$NEW_BREAK_TIME" > "$BREAK_TIME_FILE"
    
    if [[ "$DEBUG_RESPONSE" =~ ^[Yy]$ ]]; then
        touch "$DEBUG_FILE"
    elif [[ "$DEBUG_RESPONSE" =~ ^[Nn]$ ]]; then
        rm -f "$DEBUG_FILE"
    fi
    
    echo ""
    echo "Settings updated!"
    echo ""
    echo "Final settings:"
    echo "  Task: $(cat "$TITLE_FILE")"
    echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
    echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
    echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"
    exit 0
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--name)
            TITLE="$2"
            shift 2
            ;;
        --wt|--work-time)
            WORK_TIME="$2"
            shift 2
            ;;
        --bt|--break-time)
            BREAK_TIME="$2"
            shift 2
            ;;
        --debug)
            DEBUG="1"
            shift
            ;;
        --emoji)
            echo "üéØ Emoji Keyword Mappings:"
            echo ""
            if [ -f "$CONFIG_DIR/emoji_mappings.conf" ]; then
                while IFS='=' read -r key value; do
                    [[ "$key" =~ ^[[:space:]]*# ]] && continue
                    [[ -z "$key" ]] && continue
                    key=$(echo "$key" | xargs)
                    value=$(echo "$value" | xargs)
                    if [ "$key" != "default" ]; then
                        printf "  %-15s %s\n" "$key" "$value"
                    fi
                done < "$CONFIG_DIR/emoji_mappings.conf"
                echo ""
                echo "Default emoji: $DEFAULT_EMOJI"
            fi
            exit 0
            ;;
        --presets)
            echo "‚è±Ô∏è  Available Presets:"
            echo ""
            while IFS= read -r preset; do
                desc=$(get_preset "$preset" "desc")
                work=$(get_preset "$preset" "work")
                break=$(get_preset "$preset" "break")
                emoji=$(get_preset "$preset" "emoji")
                printf "  %-12s %s (%s/%s mins)\n" "$preset" "$desc" "$work" "$break"
            done < <(list_presets)
            exit 0
            ;;
        -h|--help)
            echo "Usage: pomo [options]"
            echo "Options:"
            echo "  -n, --name NAME          Set the task name/title"
            echo "  --wt, --work-time MINS   Set work session duration in minutes"
            echo "  --bt, --break-time MINS  Set break session duration in minutes"
            echo "  --debug                  Enable debug mode (1 second timers)"
            echo "  --emoji                  Show emoji mappings"
            echo "  --presets                Show available presets"
            echo "  -h, --help               Show this help message"
            echo ""
            echo "Current settings:"
            echo "  Task: $(cat "$TITLE_FILE")"
            echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
            echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
            echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use 'pomo --help' for usage information"
            exit 1
            ;;
    esac
done

# Update files if values were provided
if [ -n "$TITLE" ]; then
    # Ensure all tasks have an icon prefix
    # This centralizes icon logic here instead of in pomodoro.sh
    TITLE=$(add_emoji_to_task "$TITLE")
    echo "$TITLE" > "$TITLE_FILE"
fi
[ -n "$WORK_TIME" ] && echo "$WORK_TIME" > "$WORK_TIME_FILE"
[ -n "$BREAK_TIME" ] && echo "$BREAK_TIME" > "$BREAK_TIME_FILE"
if [ -n "$DEBUG" ]; then
    if [ "$DEBUG" = "1" ]; then
        touch "$DEBUG_FILE"
    else
        rm -f "$DEBUG_FILE"
    fi
fi

# Show current settings
echo "Pomodoro settings updated:"
echo "  Task: $(cat "$TITLE_FILE")"
echo "  Work time: $(cat "$WORK_TIME_FILE") minutes"
echo "  Break time: $(cat "$BREAK_TIME_FILE") minutes"
echo "  Debug mode: $(is_debug_mode && echo "enabled" || echo "disabled")"