#!/bin/bash

# Source common configuration
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/pomodoro_common.sh"

# Check if fzf is available
HAS_FZF=$(command -v fzf >/dev/null 2>&1 && echo "yes" || echo "no")

# Default to 7 days
DAYS=7
VIEW_MODE="chart"  # Default view mode

# Interactive mode if no arguments
if [ $# -eq 0 ]; then
    echo "📊 Pomodoro History Viewer"
    echo "========================="
    echo ""
    
    # Show available data summary
    if [ -f "$HISTORY_FILE" ]; then
        TOTAL_SESSIONS=$(grep -v "^\s*$" "$HISTORY_FILE" | wc -l | tr -d ' ')
        FIRST_DATE=$(head -1 "$HISTORY_FILE" 2>/dev/null | awk '{print $1}')
        LAST_DATE=$(tail -1 "$HISTORY_FILE" 2>/dev/null | awk '{print $1}')
        
        echo "📈 Data available:"
        echo "   Total sessions: $TOTAL_SESSIONS"
        echo "   Date range: $FIRST_DATE to $LAST_DATE"
        echo ""
    fi
    
    # Select options with fzf
    if [ "$HAS_FZF" = "yes" ]; then
        # Step 1: Select time range
        echo "Select time range:"
        
        # Build options list
        time_options="today|Today's sessions\nlast-week|Last 7 days\nlast-month|Last 30 days\nby-task|View specific task\nall-time|All time statistics\ncustom|Custom days\n"
        
        # Show fzf and get selection
        selected_line=$(echo -e "$time_options" | fzf --height=8 --layout=reverse --prompt="Time range> " --preview-window=hidden)
        
        if [ -n "$selected_line" ]; then
            # Extract option
            selected=$(echo "$selected_line" | cut -d'|' -f1)
            
            case "$selected" in
                "today")
                    DAYS=1
                    echo "Viewing today's sessions"
                    ;;
                "last-week")
                    DAYS=7
                    echo "Viewing last week"
                    ;;
                "last-month")
                    DAYS=30
                    echo "Viewing last month"
                    ;;
                "by-task")
                    # Show task selection
                    echo ""
                    echo "Select task to view:"
                    
                    # Get all unique tasks with counts
                    selected_task=$(awk -F'[][]' '{print $2}' "$HISTORY_FILE" | \
                        sed 's/^ *//;s/ *$//' | \
                        grep -v "BREAK" | \
                        grep -v "^[[:space:]]*$" | \
                        sort | uniq -c | sort -rn | \
                        awk '{printf "%3d sessions | %s\n", $1, substr($0, index($0,$2))}' | \
                        fzf --height=15 --layout=reverse --prompt="Task> " --preview-window=hidden | \
                        sed 's/^[^|]*| //')
                    
                    if [ -n "$selected_task" ]; then
                        echo ""
                        echo "📊 History for: $selected_task"
                        echo "================================"
                        echo ""
                        
                        # Show task statistics
                        total_sessions=$(grep "\\[$selected_task\\]" "$HISTORY_FILE" | wc -l | tr -d ' ')
                        total_time=$(grep "\\[$selected_task\\]" "$HISTORY_FILE" | awk '{print $(NF-1)}' | awk '{sum+=$1} END {print sum}')
                        avg_time=$(echo "scale=1; $total_time / $total_sessions" | bc)
                        
                        echo "📈 Statistics:"
                        echo "   Total sessions: $total_sessions"
                        echo "   Total time: $total_time minutes"
                        echo "   Average session: $avg_time minutes"
                        echo ""
                        echo "📅 Recent sessions:"
                        grep "\\[$selected_task\\]" "$HISTORY_FILE" | tail -10
                        exit 0
                    fi
                    ;;
                "all-time")
                    DAYS=9999
                    echo "Viewing all time statistics"
                    ;;
                "custom")
                    echo -n "Enter number of days: "
                    read DAYS
                    echo "Viewing last $DAYS days"
                    ;;
                *)
                    DAYS=7
                    ;;
            esac
        else
            # Cancelled, use default
            DAYS=7
        fi
        
        # Step 2: Select view mode
        echo ""
        echo "Select view mode:"
        
        view_options="chart|Bar chart summary\ntimeline|Detailed timeline\n"
        selected_view=$(echo -e "$view_options" | fzf --height=4 --layout=reverse --prompt="View mode> " --preview-window=hidden)
        
        if [ -n "$selected_view" ]; then
            VIEW_MODE=$(echo "$selected_view" | cut -d'|' -f1)
        fi
    else
        # Fallback to numbered menu
        echo "Quick views:"
        echo "  1) Today"
        echo "  2) Last 7 days (week)"
        echo "  3) Last 30 days (month)"
        echo "  4) Custom range"
        echo ""
        echo -n "Choose option (1-4): "
        read OPTION
        
        case "$OPTION" in
            1)
                DAYS=1
                echo "Viewing today's sessions"
                ;;
            2)
                DAYS=7
                echo "Viewing last week"
                ;;
            3)
                DAYS=30
                echo "Viewing last month"
                ;;
            *)
                echo -n "Enter number of days to view: "
                read DAYS
                ;;
        esac
        
        echo ""
        echo "View mode:"
        echo "  1) Bar chart (summary)"
        echo "  2) Timeline (detailed)"
        echo ""
        echo -n "Choose view (1-2): "
        read VIEW_OPTION
        
        case "$VIEW_OPTION" in
            2)
                VIEW_MODE="timeline"
                ;;
            *)
                VIEW_MODE="chart"
                ;;
        esac
    fi
    
    echo ""
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--days)
            DAYS="$2"
            shift 2
            ;;
        --timeline)
            VIEW_MODE="timeline"
            shift
            ;;
        --task)
            # Quick task view with fzf
            if [ "$HAS_FZF" = "yes" ]; then
                # Get all unique tasks with counts
                selected_task=$(awk -F'[][]' '{print $2}' "$HISTORY_FILE" | \
                    sed 's/^ *//;s/ *$//' | \
                    grep -v "BREAK" | \
                    grep -v "^[[:space:]]*$" | \
                    sort | uniq -c | sort -rn | \
                    awk '{printf "%3d sessions | %s\n", $1, substr($0, index($0,$2))}' | \
                    fzf --height=15 --layout=reverse --prompt="Select task> " --preview-window=hidden | \
                    sed 's/^[^|]*| //')
                
                if [ -n "$selected_task" ]; then
                    echo ""
                    echo "📊 History for: $selected_task"
                    echo "================================"
                    echo ""
                    
                    # Show task statistics
                    total_sessions=$(grep "\\[$selected_task\\]" "$HISTORY_FILE" | wc -l | tr -d ' ')
                    total_time=$(grep "\\[$selected_task\\]" "$HISTORY_FILE" | awk '{print $(NF-1)}' | awk '{sum+=$1} END {print sum}')
                    avg_time=$(echo "scale=1; $total_time / $total_sessions" | bc)
                    
                    echo "📈 Statistics:"
                    echo "   Total sessions: $total_sessions"
                    echo "   Total time: $total_time minutes"
                    echo "   Average session: $avg_time minutes"
                    echo ""
                    echo "📅 Recent sessions:"
                    grep "\\[$selected_task\\]" "$HISTORY_FILE" | tail -10
                fi
            else
                echo "Error: fzf is not installed"
                echo "Install with: brew install fzf"
                exit 1
            fi
            exit 0
            ;;
        -h|--help)
            echo "Usage: pomo-vis [options]"
            echo "Visualize your pomodoro session history"
            echo ""
            echo "Options:"
            echo "  -d, --days N    Show last N days (default: 7)"
            echo "  --timeline       Show timeline view instead of bar chart"
            echo "  --task          Quick task selection with fzf"
            echo "  -h, --help      Show this help message"
            echo ""
            echo "Examples:"
            echo "  pomo-vis                   # Interactive mode"
            echo "  pomo-vis -d 2              # Show last 2 days as bar chart"
            echo "  pomo-vis --timeline        # Show timeline view"
            echo "  pomo-vis --timeline -d 3   # Show last 3 days as timeline"
            echo "  pomo-vis --task            # Select specific task to view"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use 'pomo-vis --help' for usage information"
            exit 1
            ;;
    esac
done

# Check if history file exists
if [ ! -f "$HISTORY_FILE" ]; then
    echo "No pomodoro history found."
    exit 0
fi

echo "📊 Pomodoro Sessions (Last $DAYS days)"
echo ""


# Get the date N days ago
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS date command
    START_DATE=$(date -v-${DAYS}d "+%Y-%m-%d")
else
    # Linux date command
    START_DATE=$(date -d "$DAYS days ago" "+%Y-%m-%d")
fi

# Filter history for work sessions in date range
FILTERED_SESSIONS=$(awk -v start="$START_DATE" '
    {
        # Extract date from timestamp
        date = $1
        # Only include work sessions (not breaks) from start date onwards
        if ($3 != "[BREAK]" && date >= start) {
            print $0
        }
    }
' "$HISTORY_FILE")

# Check if we have any sessions
if [ -z "$FILTERED_SESSIONS" ]; then
    echo "No work sessions found in the last $DAYS days."
    exit 0
fi

# Display based on view mode
if [ "$VIEW_MODE" = "timeline" ]; then
    # For timeline, we want ALL sessions (including breaks)
    ALL_SESSIONS=$(awk -v start="$START_DATE" '
        {
            # Extract date from timestamp
            date = $1
            # Include all sessions from start date onwards
            if (date >= start) {
                print $0
            }
        }
    ' "$HISTORY_FILE")
    
    # Check if we have any sessions for timeline
    if [ -z "$ALL_SESSIONS" ]; then
        echo "No sessions found in the last $DAYS days."
        exit 0
    fi
    
    # Sort sessions by timestamp for timeline
    SORTED_SESSIONS=$(echo "$ALL_SESSIONS" | sort)
    
    # Determine title based on days
    if [ "$DAYS" = "1" ]; then
        echo "📅 Today's Sessions:"
    else
        echo "📅 Last $DAYS days Sessions:"
    fi
    echo ""
    
    # Process sessions and group by hour
    CURRENT_HOUR=""
    CURRENT_DATE=""
    echo "$SORTED_SESSIONS" | while read line; do
        # Extract date, time and session info
        DATE=$(echo "$line" | awk '{print $1}')
        TIME=$(echo "$line" | awk '{print $2}')
        HOUR=$(echo "$TIME" | cut -d: -f1)
        MINUTE=$(echo "$TIME" | cut -d: -f2)
        
        # Extract task name and duration
        TASK=$(echo "$line" | sed -n 's/.*\[\(.*\)\].*/\1/p')
        DURATION=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if($i=="mins") print $(i-1)}')
        
        # Print date header if new date
        if [ "$DATE" != "$CURRENT_DATE" ] && [ "$DAYS" != "1" ]; then
            CURRENT_DATE="$DATE"
            CURRENT_HOUR=""  # Reset hour for new date
            echo ""
            echo "── $DATE ──"
            echo ""
        fi
        
        # Add spacing between different hours
        if [ "$HOUR" != "$CURRENT_HOUR" ]; then
            if [ -n "$CURRENT_HOUR" ]; then
                echo "      │"  # Add a visual separator between hours
            fi
            CURRENT_HOUR="$HOUR"
        fi
        
        # Extract icon and clean task name
        ICON=$(extract_icon "$TASK")
        CLEAN_TASK=$(extract_task_name "$TASK")
        
        # Format time as HH:MM
        TIME_FORMATTED=$(printf "%s:%s" "$HOUR" "$MINUTE")
        
        # Print session with proper alignment
        # Format: "HH:MM ┤ 🍅 Task Name (25m)"
        printf "%5s ┤ %s %-30s (%sm)\n" "$TIME_FORMATTED" "$ICON" "$CLEAN_TASK" "$DURATION"
    done
    
    # Calculate and show summary
    echo ""
    echo "──────────────────────────────────────────────"
    TOTAL_MINUTES=$(echo "$SORTED_SESSIONS" | awk '
        {
            for (i = 1; i <= NF; i++) {
                if ($i == "mins") {
                    total += $(i-1)
                }
            }
        }
        END { print total }
    ')
    TOTAL_HOURS=$(echo "scale=1; $TOTAL_MINUTES / 60" | bc)
    WORK_SESSIONS=$(echo "$SORTED_SESSIONS" | grep -v "\[BREAK\]" | wc -l | tr -d ' ')
    BREAK_SESSIONS=$(echo "$SORTED_SESSIONS" | grep "\[BREAK\]" | wc -l | tr -d ' ')
    
    echo "Total: $TOTAL_HOURS hours ($WORK_SESSIONS work, $BREAK_SESSIONS breaks)"
    
    exit 0
fi

# Calculate total hours per day
DAILY_HOURS=$(echo "$FILTERED_SESSIONS" | awk '
    {
        date = $1
        # Extract minutes from the log entry (e.g., "30 mins")
        for (i = 1; i <= NF; i++) {
            if ($i == "mins") {
                minutes = $(i-1)
                hours[date] += minutes / 60.0
                break
            }
        }
    }
    END {
        for (d in hours) {
            printf "%s %.1f\n", d, hours[d]
        }
    }
' | sort)

# Find max hours for scaling
MAX_HOURS=$(echo "$DAILY_HOURS" | awk '{if ($2 > max) max = $2} END {print max}')

# Draw bar chart
echo "Daily Hours:"
echo ""
echo "$DAILY_HOURS" | while read date hours; do
    # Calculate bar length (max 40 chars)
    if (( $(echo "$MAX_HOURS > 0" | bc -l) )); then
        BAR_LENGTH=$(echo "scale=0; $hours * 40 / $MAX_HOURS" | bc)
    else
        BAR_LENGTH=0
    fi
    
    # Create bar
    BAR=$(printf '█%.0s' $(seq 1 $BAR_LENGTH))
    
    # Print formatted line
    printf "%-10s  %-40s %.1f hours\n" "$date" "$BAR" "$hours"
done

# Count task frequency
echo ""
echo "Tasks:"
echo ""
TASK_HOURS=$(echo "$FILTERED_SESSIONS" | awk '
    {
        # Extract task name - find text between [ and ]
        start = index($0, "[")
        end = index($0, "]")
        if (start > 0 && end > start) {
            task = substr($0, start + 1, end - start - 1)
            # Find minutes
            for (i = 1; i <= NF; i++) {
                if ($i == "mins" && i > 1) {
                    minutes = $(i-1)
                    hours[task] += minutes / 60.0
                    break
                }
            }
        }
    }
    END {
        for (t in hours) {
            printf "%.1f %s\n", hours[t], t
        }
    }
' | sort -nr | head -10)

# Find max task hours for scaling
MAX_TASK_HOURS=$(echo "$TASK_HOURS" | awk '{if ($1 > max) max = $1} END {print max}')

# Show task breakdown
echo "$TASK_HOURS" | while read hours task; do
    # Calculate bar length (max 20 chars for tasks)
    if (( $(echo "$MAX_TASK_HOURS > 0" | bc -l) )); then
        BAR_LENGTH=$(echo "scale=0; $hours * 20 / $MAX_TASK_HOURS" | bc)
    else
        BAR_LENGTH=0
    fi
    
    # Create bar
    BAR=$(printf '█%.0s' $(seq 1 $BAR_LENGTH))
    
    # Extract icon and clean task name
    ICON=$(extract_icon "$task")
    CLEAN_TASK=$(extract_task_name "$task")
    
    # Print formatted line with icon
    printf "%s %-30s %-20s %.1fh\n" "$ICON" "$CLEAN_TASK" "$BAR" "$hours"
done