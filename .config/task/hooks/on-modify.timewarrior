#!/usr/bin/env python3

import json
import subprocess
import sys

# Hook should extract all the following for use in Timewarrior:
#   Project
#   Tags
#   Description
#   UUID

try:
    input_stream = sys.stdin.buffer
except AttributeError:
    input_stream = sys.stdin


def extract_tags_from(json_obj):
    # Extract attributes for use as tags, excluding the description.
    tags = []
    if "project" in json_obj:
        tags.append(json_obj["project"])
    if "tags" in json_obj:
        if isinstance(json_obj["tags"], str):
            # Convert string of tags back into a list.
            tags.extend(json_obj["tags"].split(","))
        else:
            tags.extend(json_obj["tags"])
    return tags


def main(old, new):
    start_or_stop = ""
    # Determine if the task has been started or stopped.
    if "start" in new and "start" not in old:
        start_or_stop = "start"
    elif ("start" not in new or "end" in new) and "start" in old:
        start_or_stop = "stop"

    if start_or_stop:
        tags = extract_tags_from(new)
        # Start or stop time tracking with the extracted tags.
        subprocess.call(["timew", start_or_stop] + tags + [":yes"])
        # If starting, add the description and UUID as annotations.
        if start_or_stop == "start":
            description = new.get("description", "")
            subprocess.call(["timew", "annotate", "@1", description])
            uuid = new.get("uuid", "")
            if uuid:
                subprocess.call(["timew", "annotate", "@1", "UUID: " + uuid])
    # Handle modifications to a running task.
    elif "start" in new and "start" in old:
        old_tags = extract_tags_from(old)
        new_tags = extract_tags_from(new)
        # Update tags if they have changed.
        if old_tags != new_tags:
            subprocess.call(["timew", "untag", "@1"] + old_tags + [":yes"])
            subprocess.call(["timew", "tag", "@1"] + new_tags + [":yes"])
        # Update the description annotation if it has changed.
        old_description = old.get("description", "")
        new_description = new.get("description", "")
        if old_description != new_description:
            # Remove the old description annotation and add the new one.
            # Timewarrior doesn't support removing specific annotations,
            # so we can re-annotate or handle it as per your requirements.
            subprocess.call(["timew", "annotate", "@1", new_description])
        # Generally, the UUID won't change, but include handling just in case.
        old_uuid = old.get("uuid", "")
        new_uuid = new.get("uuid", "")
        if old_uuid != new_uuid and new_uuid:
            subprocess.call(["timew", "annotate", "@1", "UUID: " + new_uuid])


if __name__ == "__main__":
    old = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
    new = json.loads(input_stream.readline().decode("utf-8", errors="replace"))
    print(json.dumps(new))
    main(old, new)
